//
// @copyright 2021 wesen
// @author wesen <wesen-ac@web.de>
//

//
// Ip based auto kick/ban script
//

persistidents 0;

//
// Stores whether the auto kick/ban mode is currently enabled
//
// @var int autoKickBanModeActive
//
check2init autoKickBanModeActive 0;

//
// Stores the IP's that should be auto kicked on connect
//
// @var string[] autoKickIps
//
check2init autoKickIps [];

//
// Stores the IP's that should be auto banned on connect
//
// @var string[] autoBanIps
//
check2init autoBanIps [];

//
// Stores the kick command to use to kick players
// Contains the standard "/kick" command by default
//
// @var string kickCommand
//
check2init kickCommand [kick %1 "%2"];

//
// Stores the ban command to use to ban players
// Contains the standard "/ban" command by default
//
// @var string banCommand
//
check2init banCommand [ban %1 "%2"];


// Public Functions

//
// Enables the auto kick/ban mode.
//
const enableAutoKickBanMode [
  autoKickBanModeActive = 1;
]

//
// Disables the auto kick/ban mode.
//
const disableAutoKickBanMode [
  autoKickBanModeActive = 0;
]

//
// Returns whether the auto kick/ban mode is currently enabled.
//
// @return int 1 if the auto kick/ban mode is currently enabled, 0 otherwise
//
const isAutoKickBanModeEnabled [
  return $autoKickBanModeActive;
]


//
// Adds a given client to the auto kick IP list.
//
// @param int targetClientNumber ($arg1) The target client number
//
const autoKickClient [
  addClientToAutoKickBanList "autoKickIps" $arg1;
]

//
// Adds a given client to the auto ban IP list.
//
// @param int targetClientNumber ($arg1) The target client number
//
const autoBanClient [
  addClientToAutoKickBanList "autoBanIps" $arg1;
]

//
// Removes a given client from the auto kick IP list.
//
// @param int targetClientNumber ($arg1) The target client number
//
const unkickClient [
  removeClientFromAutoKickBanList "autoKickIps" $arg1;
]

//
// Removes a given client from the auto ban IP list.
//
// @param int targetClientNumber ($arg1) The target client number
//
const unbanClient [
  removeClientFromAutoKickBanList "autoBanIps" $arg1;
]

//
// Tries to kick a player if his IP is in the auto kick or ban IP list.
//
// @param int clientNumber ($arg1) The client number to check
// 
const autoKickBanClient [

  targetClientNumber = $arg1;
  targetClientIp = (player $targetClientNumber ip);

  if (strcmp $targetClientIp "0.0.0.x")[
    sleep 100 [
      autoKickBanClient $targetClientNumber;
    ]
  ][
    commandToExecute = "";
    if (isIpAutoKickBanIp "autoBanIps" $targetClientIp) [
      commandToExecute = (format $banCommand $targetClientNumber (getKickBanReason));
    ][
      if (isIpAutoKickBanIp "autoKickIps" $targetClientIp) [
        commandToExecute = (format $kickCommand $targetClientNumber (getKickBanReason));
      ]
    ]

    if (! (strcmp $commandToExecute "")) [
      execute $commandToExecute;
    ]
  ]

]


// Event Listeners

//
// Event handler that is called when a player connects.
//
// @param int clientNumber ($arg1) The client number of the player who connected
//
checkinit onConnect [
  if (isAutoKickBanModeEnabled) [
    autoKickBanClient $arg1;
  ]
]


//
// Event listener that will be called after saved.cfg was loaded.
//
checkinit afterinit [

  if (! (isIdent "autoKickBanReasons")) [

    //
    // List of random reasons for kicking/banning the target(s).
    // A custom list may be defined in a different script
    //    
    // @var string[] autoKickBanReasons
    //
    const autoKickBanReasons [
      "autokick"
      "gema"
      "gemakilling, trolling or cheating"
      "you are not allowed to connect"
      "don't kill, troll or cheat!"
      "autokick > troll"
    ];

  ]

]


// Private Functions

//
// Adds a given client to the auto kick/ban IP list.
//
// @param string ipListName ($arg1) The IP list name
// @param int targetClientNumber ($arg2) The target client number
//
const addClientToAutoKickBanList [

  ipListName = $arg1;
  targetClientNumber = $arg2;

  clientIpNotAddableReason = (getClientIpNotAddableToAutoKickBanIpListReason $ipListName $targetClientNumber);
  if (! (strcmp $clientIpNotAddableReason "")) [
    echo (c 3) "Error:" $clientIpNotAddableReason;
  ][
    targetClientIp = (player $targetClientNumber ip);
    if (strcmp $targetClientIp "") [
      echo (c 3) "Failed to fetch target client IP";
    ][
      add2list $ipListName $targetClientIp;
      echo (c J) "Ip" $targetClientIp "added to the" $ipListName "list";
    ]
  ]

]

//
// Removes a given client from the auto kick/ban IP list.
//
// @param string ipListName ($arg1) The IP list name
// @param int targetClientNumber ($arg2) The target client number
//
const removeClientFromAutoKickBanList [

  ipListName = $arg1;
  targetClientNumber = $arg2;

  targetClientIp = (player $targetClientNumber ip);
  if (strcmp $targetClientIp "") [
    echo (c 3) "Failed to fetch target client IP";
  ][
    if (isIpAutoKickBanIp $ipListName $targetClientIp) [
      $ipListName = (strreplace $ipListName $targetClientIp "");
      echo (c J) "Ip removed from" $ipListName "list";
    ][
      echo (c 3) "Error: Ip is not contained in" $ipListName "list";
    ]
  ]

]

//
// Returns whether a given IP is contained in the auto kick/ban IP list.
//
// @param string ipListName ($arg1) The IP list name
// @param string ip ($arg2) The IP to check
//
// @return int 1 if the IP is contained in the auto kick/ban IP list, 0 otherwise
//
const isIpAutoKickBanIp [
  return (!= (findlist (getalias $arg1) $arg2) -1);
]

//
// Returns the reason why a given client's IP can not be added to the auto kick/ban IP list.
// Will return an empty string if there is no reason to not add the IP.
//
// @param string ipListName ($arg1) The IP list name
// @param int targetClientNumber ($arg2) The client number to check
//
// @return string The reason why the client's IP can not be added to the auto kick/ban IP list
//
const getClientIpNotAddableToAutoKickBanIpListReason [

  ipListName = $arg1;
  targetClientNumber = $arg2;

  if (= $targetClientNumber (player1 cn)) [
    return "Target client is player1";
  ][
    if (! (isclient $targetClientNumber)) [
      return "No client connected with client number" $targetClientNumber;
    ][
      if (isIpAutoKickBanIp $ipListName (player $targetClientNumber ip)) [
        return "IP is already contained in auto kick/ban list";
      ][
        return "";
      ]
    ]
  ]

]

//
// Returns a random kick/ban reason.
//
// @return string THe random kick/ban reason
//
const getKickBanReason [
  return (at $autoKickBanReasons (rnd (listlen $autoKickBanReasons)));
]
