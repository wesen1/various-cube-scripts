//
// @author wesen
// @copyright 2021 wesen <wesen-ac@web.de>
//

//
// Board module for game-of-life
//
// Provides functions to manage the board fields and to retrieve information about the fields.
//
// Requires:
//   * scripts/game-of-life/unpersist/declarations.cfg
//   * scripts/game-of-life/unpersist/functions.cfg
//   * scripts/game-of-life/board.cfg
//

persistidents 0;

//
// The list of board fields of the current simulation
//
// @var int[][] boardFields
//
checkinit boardFields [];


// Public Functions

//
// Returns the current board fields.
//
// @return int[][] The board fields
//
function getBoardFields [
  return $boardFields;
]

//
// Sets the current board fields.
//
// @param int newBoardFields ($arg1) The new board fields to set
//
function setBoardFields [
  boardFields = $arg1;
]

//
// Returns the row fields for a given row.
//
// @param int rowNumber ($arg1) The row whose row fields to return
//
// @return int[] The row fields of the given row
//
function getRowFields [
  rowNumber = $arg1;

  row = (at $boardFields $rowNumber);
  return (strreplace $row "_" " ");
]

//
// Returns the value of the cell at the given position.
//
// @param int rowNumber ($arg1) The row number of the cell
// @param int columnNumber ($arg2) The column number of the cell
//
// @return int The current value of the cell
//
function getCell [
  rowNumber = $arg1;
  columnNumber = $arg2;

  return (at (getRowFields $rowNumber) $columnNumber);
]

//
// Returns the current board height.
//
// @return int The board height
//
function getBoardHeight [
  return (listlen $boardFields);
]

//
// Returns the current board width.
//
// @return int The current board width
//
function getBoardWidth [
  return (listlen (getRowFields 0));
]


//
// Initializes the list of board fields with random cell states.
//
// @param int boardHeight ($arg1) The height of the board
// @param int boardWidth ($arg2) The width of the board
//
function initializeBoardFields [

  boardHeight = $arg1;
  boardWidth = $arg2;

  boardFields = [];
  loop y $boardHeight [

    boardFieldRow = [];
    loop x $boardWidth [
      if (> (rnd 1000) 500) [
        add2list boardFieldRow 1;
      ][
        add2list boardFieldRow 0;
      ]
    ]

    boardFields = (concat $boardFields (strreplace $boardFieldRow " " "_"));

  ]

]

//
// Returns the number of living neighbors for a cell.
//
// @param int cellX ($arg1) The X-Position of the cell
// @param int cellY ($arg2) The Y-Position of the cell
//
// @return int The number of living neighbors
//
function getNumberOfLivingNeighbors [

  cellX = $arg1;
  cellY = $arg2;

  // Get neighbors x
  neighborsX = $cellX;
  if (> $cellX 0) [
    add2list neighborsX (- $cellX 1); // Column to the left
  ]
  if (< $cellX (- (getBoardWidth) 1)) [
    add2list neighborsX (+ $cellX 1); // Column to the right
  ]

  // Get neighbors y
  neighborsY = $cellY;
  if (> $cellY 0) [
    add2list neighborsY (- $cellY 1); // Row above
  ]
  if (< $cellY (- (getBoardHeight) 1)) [
    add2list neighborsY (+ $cellY 1); // Row below
  ]

  // Calculate number of living neighbors
  numberOfLivingNeighbors = 0;
  ulooplist $neighborsY y [
    ulooplist $neighborsX x [
      if (|| (!= $cellY $y) (!= $cellX $x)) [
        if (= (getCell $y $x) 1) [
          ++ numberOfLivingNeighbors;
        ]
      ]
    ]
  ]

  return $numberOfLivingNeighbors;
]
