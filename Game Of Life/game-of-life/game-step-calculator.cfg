//
// @author wesen
// @copyright 2021 wesen <wesen-ac@web.de>
//

//
// Game step calculator module for game-of-life
//
// Provides functions to calculate a game step for the simulation.
//
// Requires:
//   * scripts/game-of-life/unpersist/declarations.cfg
//   * scripts/game-of-life/board.cfg
//

persistidents 0;


// Public Functions

//
// Calculates a single game step.
//
// @return int[][] The updated board fields
//
function calculateStep [

  boardHeight = (getBoardHeight);
  boardWidth = (getBoardWidth);

  newBoardFields = [];
  loop gameStepY $boardHeight [

    newBoardFieldRow = [];
    loop gameStepX $boardWidth [

      fieldState = (getCell $gameStepY $gameStepX);
      numberOfLivingNeighbors = (getNumberOfLivingNeighbors $gameStepX $gameStepY);
      newFieldState = (updateFieldState $fieldState $numberOfLivingNeighbors);

      add2list newBoardFieldRow $newFieldState;
    ]

    add2list newBoardFields (strreplace $newBoardFieldRow " " "_");
  ]

  return $newBoardFields;

]


// Private Functions

//
// Updates a single fields state based on the Conway Rules (23/3).
//
// @param int fieldState ($arg1) The current field state
// @param int numberOfLivingNeighbors ($arg2) The number of living neighbors
//
// @return int The calculated new field state
//
function updateFieldState [

  fieldState = $arg1;
  numberOfLivingNeighbors = $arg2;

  newFieldState = $fieldState;
  if (= $fieldState 1) [
    if (|| (< $numberOfLivingNeighbors 2) (> $numberOfLivingNeighbors 3)) [
      newFieldState = 0;
    ]
  ][
    if (= $numberOfLivingNeighbors 3) [
      newFieldState = 1;
    ]
  ]

  return $newFieldState;
]
