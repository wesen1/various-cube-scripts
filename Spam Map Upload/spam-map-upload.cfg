//
// @author wesen
// @copyright 2018 wesen <wesen-ac@web.de>
//

persistidents 0;

// Characters that may be used in a map name
const mapNameCharacters "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0 - _";

// The list of characters that must be present in a map name in order for it to count as a gema map
const gemaMapNameCodes ["Gg" "3eE" "Mm" "Aa4"];

// List of generated maps
mapNameList = "";


//
// Generates and returns a random map name.
//
// @param $arg1 If set to 1 the map name will be a gema map name
//
// @return The random map name
//
const generateMapName [

  mapName = "";
  isGemaMapSpam = $arg1;

  // Chooses a random number between 1 and 64
  // The maximum map name length is 64 characters
  mapNameLength = (+ (rnd 63) 1);

  if ($isGemaMapSpam) [
    numberOfGemaCodeLetters = (listlen $gemaMapNameCodes);
    numberOfRandomMapNameLetters = (- $mapNameLength $numberOfGemaCodeLetters);

    // Chooses a random number between 1 and the total number of random map name letters
    gemaCodePosition = (+ (rnd $numberOfRandomMapNameLetters) 1);
    remainingMapNameLength = (- $numberOfRandomMapNameLetters $gemaCodePosition);

    mapName = (concatword (getRandomMapNameCharacters $gemaCodePosition) (generateGemaCode) (getRandomMapNameCharacters $remainingMapNameLength));

  ][
    mapName = (getRandomMapNameCharacters $mapNameLength);
  ]

  return $mapName;

]

//
// Returns a specific amount of random map name characters.
//
// @param $arg1 The number of random characters that will be returned
//
// @return The string of random map name characters
//
const getRandomMapNameCharacters [

  randomMapNameCharacters = "";

  loop i $arg1 [

    // Select a random character
    randomMapNameCharacter = (at $mapNameCharacters (rnd (strlen $mapNameCharacters)));

    // Add the character to the list of characterss
    randomMapNameCharacters = (concatword $randomMapNameCharacters $randomMapNameCharacter);

  ]

  return $randomMapNameCharacters;

]

//
// Returns a random gema code (Combination of "Gg", "3eE", "Mm" and "Aa@4").
//
// @return The random gema code
//
const generateGemaCode [

  gemaCode = "";

  looplist $gemaMapNameCodes gemaMapNameCode [

    randomGemaCodeLetterPosition = (rnd (strlen $gemaMapNameCode));
    randomGemaCodeLetter = (substr $gemaMapNameCode $randomGemaCodeLetterPosition 1);
    gemaCode = (concatword $gemaCode $randomGemaCodeLetter);

  ]

  return $gemaCode;

]

//
// Saves the currently loaded map a specific number of times with random names.
//
// @param $arg1 The amount of maps that will be generated
// @param $arg2 If set to 1 the map names will be gema map names
// @param $arg3 The amount of already generated maps (Used for recursion, should not be set by the user)
//
const mapSpamSaveMap [

  amountMaps = $arg1;
  isGemaMapSpam = $arg2;

  counter = 0;
  if ($arg3) [
    counter = $arg3;
  ][
    // Reset the map name list
    mapNameList = "";
  ]

  if (< $counter $amountMaps) [

    randomMapName = (generateMapName $isGemaMapSpam);

    // Check whether the map name already exists in map name list
    if (! (strstr $mapNameList $randomMapName)) [

      ++ counter;
      mapNameList = (concat $mapNameList $randomMapName);
      savemap $randomMapName;
    ]

    // Sleep for 5 milliseconds to avoid the game freezing from too many savemap requests at once
    // TODO: Check whether this sleep can be ommitted
    sleep 1 [
      mapSpamSaveMap $amountMaps $isGemaMapSpam $counter;
    ]

  ]

]

checkinit currentMapIndex 0;

const uploadNextGemaMap [
  sleep 1 [
    sendmap (at $mapNameList $currentMapIndex);
    ++ currentMapIndex;

    if (< $currentMapIndex (listlen $mapNameList)) [
      uploadNextGemaMap;
    ]
  ]
]


//
// Uploads all maps that were previously saved with mapSpamSaveMap.
//
const mapSpamUploadMaps [

  currentMapIndex = 0;
  uploadNextGemaMap;

]


//
// Method that is called on quitting the game.
//
checkinit onQuit [

  // Reset the map name list
  mapNameList = "";

]


// Documentation
docsection "Spam: Map Upload";

// Constants
docident "mapNameCharacters" "Stores the characters that may be used in a map name";
docident "gemaMapNameCodes" "Stores the characters that must be present in a map name in order for it to count as a gema map";

// Public Functions
docident "mapSpamSaveMap" "Saves the currently loaded map a specific number of times with random names";
docargument "A" "The amount of maps that will be generated" "" 1;
docargument "B" "If set to 1 the map names will be gema map names" "" 1;
docexample "mapSpamSaveMap 10" "Saves the current map 10 times with random names";

docident "mapSpamUploadMaps" "Uploads all maps that were previously saved with mapSpamSaveMap";

// Private Functions
docident "generateMapName" "Generates and returns a random map name";
docargument "A" "If set to 1 the map name will be a gema map name";

docident "getRandomMapNameCharacters" "Returns a specific amount of random map name characters";
docargument "A" "The number of random characters that will be returned";

docident "generateGemaCode" "Returns a random gema code (Combination of 'Gg', '3eE', 'Mm' and 'Aa@4')";


// TODO: Check the sleep in the above function
// TODO: Check docarguments of new methods
// TODO: Check whether the script is still working
